{
  "person_info": {
    "sql": "MATCH (E:user) where E.id='%s' return E.id as id,E.name as name,E.age as age",
    "para": "id"
  },
  "insert_info":[ {
    "sql": "create(p:product{id:%s,type1:%s,type2:%s,type3:%s})",
    "para": "id,type1,type2,type3"
  },{

  }],
  "insert_passge_id": "merge(p:passage{id:%s})",
  "insert_person": "merge(p:person{id:%s})",
  "create_link": "match(u1:person),(u2:person) where not (u1)-[:link]->(u2) and u1<>u2 and u1.id=%s and u2.id=%s create(u1)-[l:link]->(u2)",
  "insert_ming": "merge(p:ming{id:'%s'}) on match set p.count=p.count+1 on create set p.count=1",
  "insert_p2m_ins": "match(n:passage),(p:ming) where (%s) and n.id=%s create (n)-[:be]->(p)",
  "search_p": "match c=(p)-[:be]->(n) where %s return p.id",
  "select_attention": "match(n:person)-[:link]->(m:person) where n.id=%s return count(m) as p",
  "select_fans": "match(n:person)-[:link]->(m:person) where m.id=%s return count(n) as p",
  "select_fan_num": "match p=(n1)-[:link]->(n2) where n1.id=%s return n2.id as id",
  "select_attention_num": "match p=(n1)-[:link]->(n2) where n2.id=%s return n1.id as id",
  "del_link": "match (n1:person)-[c:link]->(n2:person) where n1.id=%s and n2.id=%s delete c",
  "relationship_person2person": "match c=(n1:person),(n2:person)\nwhere n1.id=%s and n2.id=%s\nreturn \ncase\n\twhen (n1)-[:link]->(n2) and (n2)-[:link]->(n1)\n    \tThen 0\n     when (n1)-[:link]->(n2)\n    \tThen 1\n     when (n2)-[:link]->(n1)\n    \tThen 2\n    else 3\nEnd as p"

}
